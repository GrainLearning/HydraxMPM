"""Unit tests for the cubic shape functions."""

import jax.numpy as jnp
import numpy as np

import hydraxmpm as hdx


def test_create():
    """Test creation of cubic shape function."""

    solver = hdx.MPMSolver(
        material_points=hdx.MaterialPoints(
            position_stack=jnp.array([[0.1, 0.2], [0.1, 0.2]])
        ),
        grid=hdx.Grid(origin=[0.0, 0.0], end=[1.0, 1.0], cell_size=0.1),
        shapefunction="cubic",
        dim=2,
    )

    np.testing.assert_allclose(solver.shape_map._intr_shapef_stack, jnp.zeros((2 * 16)))

    np.testing.assert_allclose(
        solver.shape_map._intr_shapef_grad_stack,
        jnp.zeros((2 * 16, 3), dtype=jnp.float32),
    )


def test_calc_shp_2d():
    """Test the cubic shape function for 2D."""

    solver = hdx.MPMSolver(
        material_points=hdx.MaterialPoints(
            position_stack=jnp.array([[0.45, 0.21], [0.3, 0.4]])
        ),
        grid=hdx.Grid(origin=[0.0, 0.0], end=[1.0, 1.0], cell_size=0.1),
        shapefunction="cubic",
        dim=2,
    )

    shape_map = solver.shape_map._get_particle_grid_interactions_batched(
        solver.material_points, solver.grid
    )

    np.testing.assert_allclose(
        shape_map._intr_shapef_stack.shape,
        (2 * 16),
    )

    expected_shapef_stack = [
        2.5312577e-03,
        1.3691000e-02,
        4.6076472e-03,
        3.4694935e-06,
        5.8218818e-02,
        3.1489241e-01,
        1.0597569e-01,
        7.9798207e-05,
        5.8218818e-02,
        3.1489241e-01,
        1.0597569e-01,
        7.9798207e-05,
        2.5312577e-03,
        1.3691000e-02,
        4.6076472e-03,
        3.4694935e-06,
        2.7777765e-02,
        1.1111109e-01,
        2.7777774e-02,
        -1.9868210e-08,
        1.1111109e-01,
        4.4444448e-01,
        1.1111113e-01,
        -7.9472862e-08,
        2.7777774e-02,
        1.1111113e-01,
        2.7777784e-02,
        -1.9868217e-08,
        -1.9868210e-08,
        -7.9472862e-08,
        -1.9868217e-08,
        1.4210855e-14,
    ]
    np.testing.assert_allclose(
        expected_shapef_stack, shape_map._intr_shapef_stack, rtol=1e-4
    )

    expected_shapef_grad_stack = [
        [-1.5187517e-01, -8.4375188e-02, 0.0000000e00],
        [-8.2145840e-01, -3.8541708e-02, 0.0000000e00],
        [-2.7645829e-01, 1.2187522e-01, 0.0000000e00],
        [-2.0816922e-04, 1.0416677e-03, 0.0000000e00],
        [-7.5937581e-01, -1.9406257e00, 0.0000000e00],
        [-4.1072922e00, -8.8645762e-01, 0.0000000e00],
        [-1.3822916e00, 2.8031249e00, 0.0000000e00],
        [-1.0408461e-03, 2.3958312e-02, 0.0000000e00],
        [7.5937581e-01, -1.9406257e00, 0.0000000e00],
        [4.1072922e00, -8.8645762e-01, 0.0000000e00],
        [1.3822916e00, 2.8031249e00, 0.0000000e00],
        [1.0408461e-03, 2.3958312e-02, 0.0000000e00],
        [1.5187517e-01, -8.4375188e-02, 0.0000000e00],
        [8.2145840e-01, -3.8541708e-02, 0.0000000e00],
        [2.7645829e-01, 1.2187522e-01, 0.0000000e00],
        [2.0816922e-04, 1.0416677e-03, 0.0000000e00],
        [-8.3333313e-01, -8.3333313e-01, 0.0000000e00],
        [-3.3333335e00, -0.0000000e00, 0.0000000e00],
        [-8.3333343e-01, 8.3333313e-01, 0.0000000e00],
        [5.9604645e-07, 0.0000000e00, 0.0000000e00],
        [-0.0000000e00, -3.3333335e00, 0.0000000e00],
        [-0.0000000e00, -0.0000000e00, 0.0000000e00],
        [-0.0000000e00, 3.3333335e00, 0.0000000e00],
        [0.0000000e00, 0.0000000e00, 0.0000000e00],
        [8.3333313e-01, -8.3333343e-01, 0.0000000e00],
        [3.3333335e00, -0.0000000e00, 0.0000000e00],
        [8.3333343e-01, 8.3333343e-01, 0.0000000e00],
        [-5.9604645e-07, 0.0000000e00, 0.0000000e00],
        [0.0000000e00, 5.9604645e-07, 0.0000000e00],
        [0.0000000e00, 0.0000000e00, 0.0000000e00],
        [0.0000000e00, -5.9604645e-07, 0.0000000e00],
        [-0.0000000e00, -0.0000000e00, 0.0000000e00],
    ]

    np.testing.assert_allclose(
        expected_shapef_grad_stack, shape_map._intr_shapef_grad_stack, rtol=1e-4
    )


def test_calc_shp_3d():
    """Test the cubic shape function for 3D."""
    # only test 1 particle here for clarity

    solver = hdx.MPMSolver(
        material_points=hdx.MaterialPoints(
            position_stack=jnp.array([[0.45, 0.21, 0.1]])
        ),
        grid=hdx.Grid(origin=[0.0, 0.0, 0.0], end=[1.0, 1.0, 1.0], cell_size=0.1),
        shapefunction="cubic",
        dim=3,
    )

    shape_map = solver.shape_map._get_particle_grid_interactions_batched(
        solver.material_points, solver.grid
    )

    np.testing.assert_allclose(shape_map._intr_shapef_stack.shape, (64,))

    expected_shapef_stack = [
        4.2187618e-04,
        2.2818327e-03,
        7.6794100e-04,
        5.7824877e-07,
        9.7031342e-03,
        5.2482057e-02,
        1.7662611e-02,
        1.3299698e-05,
        9.7031342e-03,
        5.2482057e-02,
        1.7662611e-02,
        1.3299698e-05,
        4.2187618e-04,
        2.2818327e-03,
        7.6794100e-04,
        5.7824877e-07,
        1.6875052e-03,
        9.1273338e-03,
        3.0717649e-03,
        2.3129958e-06,
        3.8812548e-02,
        2.0992827e-01,
        7.0650458e-02,
        5.3198804e-05,
        3.8812548e-02,
        2.0992827e-01,
        7.0650458e-02,
        5.3198804e-05,
        1.6875052e-03,
        9.1273338e-03,
        3.0717649e-03,
        2.3129958e-06,
        4.2187632e-04,
        2.2818337e-03,
        7.6794130e-04,
        5.7824900e-07,
        9.7031379e-03,
        5.2482076e-02,
        1.7662616e-02,
        1.3299703e-05,
        9.7031379e-03,
        5.2482076e-02,
        1.7662616e-02,
        1.3299703e-05,
        4.2187632e-04,
        2.2818337e-03,
        7.6794130e-04,
        5.7824900e-07,
        -3.0174943e-10,
        -1.6320943e-09,
        -5.4927435e-10,
        -4.1359586e-13,
        -6.9402240e-09,
        -3.7538101e-08,
        -1.2633286e-08,
        -9.5126875e-12,
        -6.9402240e-09,
        -3.7538101e-08,
        -1.2633286e-08,
        -9.5126875e-12,
        -3.0174943e-10,
        -1.6320943e-09,
        -5.4927435e-10,
        -4.1359586e-13,
    ]

    np.testing.assert_allclose(
        expected_shapef_stack, shape_map._intr_shapef_stack, rtol=1e-4
    )

    np.testing.assert_allclose(jnp.prod(shape_map._intr_shapef_stack), 0.0)

    expected_shapef_grad_stack = [
        [-2.5312522e-02, -1.4062528e-02, -1.2656288e-02],
        [-1.3690969e-01, -6.4236163e-03, -6.8454996e-02],
        [-4.6076372e-02, 2.0312531e-02, -2.3038236e-02],
        [-3.4694862e-05, 1.7361123e-04, -1.7347469e-05],
        [-1.2656261e-01, -3.2343754e-01, -2.9109409e-01],
        [-6.8454856e-01, -1.4774290e-01, -1.5744621e00],
        [-2.3038188e-01, 4.6718737e-01, -5.2987844e-01],
        [-1.7347431e-04, 3.9930511e-03, -3.9899105e-04],
        [1.2656261e-01, -3.2343754e-01, -2.9109409e-01],
        [6.8454856e-01, -1.4774290e-01, -1.5744621e00],
        [2.3038188e-01, 4.6718737e-01, -5.2987844e-01],
        [1.7347431e-04, 3.9930511e-03, -3.9899105e-04],
        [2.5312522e-02, -1.4062528e-02, -1.2656288e-02],
        [1.3690969e-01, -6.4236163e-03, -6.8454996e-02],
        [4.6076372e-02, 2.0312531e-02, -2.3038236e-02],
        [3.4694862e-05, 1.7361123e-04, -1.7347469e-05],
        [-1.0125011e-01, -5.6250125e-02, -0.0000000e00],
        [-5.4763895e-01, -2.5694473e-02, -0.0000000e00],
        [-1.8430553e-01, 8.1250146e-02, -0.0000000e00],
        [-1.3877949e-04, 6.9444510e-04, -0.0000000e00],
        [-5.0625056e-01, -1.2937505e00, -0.0000000e00],
        [-2.7381949e00, -5.9097177e-01, -0.0000000e00],
        [-9.2152774e-01, 1.8687500e00, -0.0000000e00],
        [-6.9389743e-04, 1.5972208e-02, -0.0000000e00],
        [5.0625056e-01, -1.2937505e00, -0.0000000e00],
        [2.7381949e00, -5.9097177e-01, -0.0000000e00],
        [9.2152774e-01, 1.8687500e00, -0.0000000e00],
        [6.9389743e-04, 1.5972208e-02, -0.0000000e00],
        [1.0125011e-01, -5.6250125e-02, -0.0000000e00],
        [5.4763895e-01, -2.5694473e-02, -0.0000000e00],
        [1.8430553e-01, 8.1250146e-02, -0.0000000e00],
        [1.3877949e-04, 6.9444510e-04, -0.0000000e00],
        [-2.5312532e-02, -1.4062533e-02, 1.2656288e-02],
        [-1.3690975e-01, -6.4236186e-03, 6.8454996e-02],
        [-4.6076387e-02, 2.0312538e-02, 2.3038236e-02],
        [-3.4694873e-05, 1.7361129e-04, 1.7347469e-05],
        [-1.2656265e-01, -3.2343766e-01, 2.9109409e-01],
        [-6.8454880e-01, -1.4774296e-01, 1.5744621e00],
        [-2.3038195e-01, 4.6718755e-01, 5.2987844e-01],
        [-1.7347437e-04, 3.9930525e-03, 3.9899105e-04],
        [1.2656265e-01, -3.2343766e-01, 2.9109409e-01],
        [6.8454880e-01, -1.4774296e-01, 1.5744621e00],
        [2.3038195e-01, 4.6718755e-01, 5.2987844e-01],
        [1.7347437e-04, 3.9930525e-03, 3.9899105e-04],
        [2.5312532e-02, -1.4062533e-02, 1.2656288e-02],
        [1.3690975e-01, -6.4236186e-03, 6.8454996e-02],
        [4.6076387e-02, 2.0312538e-02, 2.3038236e-02],
        [3.4694873e-05, 1.7361129e-04, 1.7347469e-05],
        [1.8104931e-08, 1.0058306e-08, 0.0000000e00],
        [9.7925472e-08, 4.5945296e-09, 0.0000000e00],
        [3.2956397e-08, -1.4528658e-08, 0.0000000e00],
        [2.4815705e-11, -1.2417646e-10, 0.0000000e00],
        [9.0524651e-08, 2.3134061e-07, 0.0000000e00],
        [4.8962738e-07, 1.0567398e-07, 0.0000000e00],
        [1.6478199e-07, -3.3415853e-07, 0.0000000e00],
        [1.2407853e-10, -2.8560534e-09, 0.0000000e00],
        [-9.0524651e-08, 2.3134061e-07, 0.0000000e00],
        [-4.8962738e-07, 1.0567398e-07, 0.0000000e00],
        [-1.6478199e-07, -3.3415853e-07, 0.0000000e00],
        [-1.2407853e-10, -2.8560534e-09, 0.0000000e00],
        [-1.8104931e-08, 1.0058306e-08, 0.0000000e00],
        [-9.7925472e-08, 4.5945296e-09, 0.0000000e00],
        [-3.2956397e-08, -1.4528658e-08, 0.0000000e00],
        [-2.4815705e-11, -1.2417646e-10, 0.0000000e00],
    ]

    np.testing.assert_allclose(
        expected_shapef_grad_stack, shape_map._intr_shapef_grad_stack, rtol=1e-4
    )
